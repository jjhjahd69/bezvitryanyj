import discord
from discord.ext import commands
from discord import app_commands
from templates import ebmtemp
import aiomysql
from decimal import Decimal, ROUND_HALF_UP
from config import *
from typing import Optional

class ProfileCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def checkadd(self, interaction, member):

        print(f"[CHECKADD] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {member.name} –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è")
        pool = self.bot.db_pool
        if pool is None:
            # –Ø–∫—â–æ –ø—É–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞), –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ –≤–∏—Ö–æ–¥–∏–º–æ
            await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.") # –ê–±–æ —ñ–Ω—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return

        try:
            async with pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    sql_query = "SELECT 1 FROM users WHERE userid = %s LIMIT 1"
                    query_params = (member.id,)
                    await cursor.execute(sql_query, query_params)
                    user_exist = await cursor.fetchone()

                    print(f"[CHECKADD] user_exist = {user_exist} —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {member.name}")

                    if not user_exist:
                        print(f"[CHECKADD] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {member.name} –Ω–µ —ñ—Å–Ω—É—î, –≤–∏–∫–æ–Ω—É—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è.")
                        sql_query = """
                            INSERT INTO users (userid, adminresponse, balance, description, image)
                            VALUES (%s, %s, %s, %s, %s)
                        """
                        query_params = (member.id, "–í—ñ–¥—Å—É—Ç–Ω—ñ", 0, "–û–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π.", None,)
                        await cursor.execute(sql_query, query_params)
            
        except aiomysql.Error as db_err:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            print(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_err}")
            # –ü–æ–≤—ñ–¥–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            # await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
            print(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            # await interaction.edit_original_response(content="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...")

    @app_commands.command(name='profile', description='–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
    @app_commands.describe(
        member="–£—á–∞—Å–Ω–∏–∫, —á–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ–∫–∞–∑–∞—Ç–∏ (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ - –ø–æ–∫–∞–∂–µ –≤–∞—à)" # <--- –û–ø–∏—Å –∞—Ä–≥—É–º–µ–Ω—Ç—É
    )
    async def profile(
        self,
        interaction: discord.Interaction,              # <--- interaction –∑–∞–º—ñ—Å—Ç—å ctx
        member: Optional[discord.Member] = None        # <--- –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç discord.Member
    ):  

        await interaction.response.defer(ephemeral=True, thinking=True)
        member = member or interaction.user
        await self.checkadd(interaction, member)

        pool = self.bot.db_pool
        if pool is None:
            # –Ø–∫—â–æ –ø—É–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞), –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ –≤–∏—Ö–æ–¥–∏–º–æ
            await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.") # –ê–±–æ —ñ–Ω—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return

        try:
            async with pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    sql_query = "SELECT * FROM users WHERE userid = %s"
                    query_params = (member.id,)
                    await cursor.execute(sql_query, query_params)
                    user_info = await cursor.fetchone()

                    await cursor.execute('SELECT AVG(rate) AS avg_rate FROM responses WHERE receiver = %s AND type = %s', (member.id, 2))
                    playerrate_dict = await cursor.fetchone()
                    playerrate = Decimal(playerrate_dict["avg_rate"] or 0).quantize(Decimal('0.0'), rounding=ROUND_HALF_UP)

                    await cursor.execute('SELECT AVG(rate) AS avg_rate FROM responses WHERE receiver = %s AND type = %s', (member.id, 1))
                    masterrate_dict = await cursor.fetchone()
                    masterrate = Decimal(masterrate_dict["avg_rate"] or 0).quantize(Decimal('0.0'), rounding=ROUND_HALF_UP)
                
                    await cursor.execute("SELECT id FROM users WHERE userid = %s", (member.id,))
                    user_id = await cursor.fetchone()

                    embed = discord.Embed(
                        title="–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                        description=f"**–ü—Ä–æ —Å–µ–±–µ** \n{user_info['description']}",
                        color=discord.Color(value=0x2F3136),  # –º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∫–æ–ª—ñ—Ä
                    )
                    # –¥–æ–¥–∞—î–º–æ –ø–æ–ª—è
                    embed.add_field(name="–†–µ–π—Ç–∏–Ω–≥ (–ì—Ä–∞–≤—Ü—è)", value=f"{playerrate}/10", inline=True)
                    embed.add_field(name="–†–µ–π—Ç–∏–Ω–≥ (–ú–∞–π—Å—Ç—Ä–∞)", value=f"{masterrate}/10", inline=True)
                    embed.add_field(name=f"ü™ô {user_info['balance']}", value="", inline=True)
                    embed.add_field(name="–ó–∞—É–≤–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó", value=user_info["adminresponse"], inline=False)

                    # –¥–æ–¥–∞—î–º–æ –∞–≤—Ç–æ—Ä–∞
                    embed.set_author(name=member.name, icon_url=member.avatar.url)

                    # –¥–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    embed.set_image(url=user_info["image"])  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—î

                    # –¥–æ–¥–∞—î–º–æ —Ñ—É—Ç–µ—Ä
                    embed.set_footer(text=f"ID {user_id["id"]}")

                    # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –µ–º–±–µ–¥
                    await interaction.edit_original_response(embed=embed)

        except aiomysql.Error as db_err:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            print(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_err}")
            # –ü–æ–≤—ñ–¥–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            # await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
            print(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            # await interaction.edit_original_response(content="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...")

            embed = discord.Embed(
                title="–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                description=f"**–ü—Ä–æ —Å–µ–±–µ** \n{user_info['description']}",
                color=discord.Color(value=0x2F3136),  # –º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∫–æ–ª—ñ—Ä
            )
            # –¥–æ–¥–∞—î–º–æ –ø–æ–ª—è
            embed.add_field(name="–†–µ–π—Ç–∏–Ω–≥ (–ì—Ä–∞–≤—Ü—è)", value=f"{playerrate}/10", inline=True)
            embed.add_field(name="–†–µ–π—Ç–∏–Ω–≥ (–ú–∞–π—Å—Ç—Ä–∞)", value=f"{masterrate}/10", inline=True)
            embed.add_field(name=f"ü™ô {user_info['balance']}", value="", inline=True)
            embed.add_field(name="–ó–∞—É–≤–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó", value=user_info["adminresponse"], inline=False)

            # –¥–æ–¥–∞—î–º–æ –∞–≤—Ç–æ—Ä–∞
            embed.set_author(name=member.name, icon_url=member.avatar.url)

            # –¥–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            embed.set_image(url=user_info["image"])  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—î

            # –¥–æ–¥–∞—î–º–æ —Ñ—É—Ç–µ—Ä
            embed.set_footer(text=f"ID {rowid[0]}")

            # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –µ–º–±–µ–¥
            await ctx.respond(embed=embed)

    @app_commands.command(name='set-image', description='–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±–∞–Ω–µ—Ä –ø—Ä–æ—Ñ—ñ–ª—é')
    @app_commands.describe(
        image_link="–ü—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –±–∞–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://... .png)" # <--- –û–ø–∏—Å –∞—Ä–≥—É–º–µ–Ω—Ç—É
    )
    async def setimage(
        self,
        interaction: discord.Interaction, # <--- interaction –∑–∞–º—ñ—Å—Ç—å ctx
        image_link: str                   # <--- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∏–ø str (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    ):   

        await interaction.response.defer(ephemeral=True, thinking=True)
        await self.checkadd(interaction, interaction.user)

        pool = self.bot.db_pool
        if pool is None:
            # –Ø–∫—â–æ –ø—É–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞), –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ –≤–∏—Ö–æ–¥–∏–º–æ
            await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.") # –ê–±–æ —ñ–Ω—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return
    
        try:
            async with pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    sql_query = "UPDATE responses SET image = %s WHERE userid = %s"
                    query_params = (image_link, interaction.user.id,)
                    await cursor.execute(sql_query, query_params)

                    await interaction.edit_original_response(embed=ebmtemp.create("–£—Å–ø—ñ—Ö", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–∞–Ω–µ—Ä–æ–º –ø—Ä–æ—Ñ—ñ–ª—é! :sparkling_heart:"))

        except aiomysql.Error as db_err:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            print(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_err}")
            # –ü–æ–≤—ñ–¥–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            # await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
            print(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            # await interaction.edit_original_response(content="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...")

    @app_commands.command(name='set-description', description='–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é')
    @app_commands.describe(
        text="–¢–µ–∫—Å—Ç –æ–ø–∏—Å—É –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é" # <--- –û–ø–∏—Å –∞—Ä–≥—É–º–µ–Ω—Ç—É
    )
    async def setdescription(
        self,
        interaction: discord.Interaction, # <--- interaction –∑–∞–º—ñ—Å—Ç—å ctx
        text: str                         # <--- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∏–ø str (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    ):

        await interaction.response.defer(ephemeral=True, thinking=True)
        await self.checkadd(interaction, interaction.user)

        pool = self.bot.db_pool
        if pool is None:
            # –Ø–∫—â–æ –ø—É–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞), –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ –≤–∏—Ö–æ–¥–∏–º–æ
            await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.") # –ê–±–æ —ñ–Ω—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return

        try:
            async with pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    sql_query = "UPDATE users SET description = %s WHERE userid = %s"
                    query_params = (text, interaction.user.id, )
                    await cursor.execute(sql_query, query_params)

                    await interaction.edit_original_response(embed=ebmtemp.create("–£—Å–ø—ñ—Ö", f"–û–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. :sparkling_heart: \n```{text}```"))

            
        except aiomysql.Error as db_err:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            print(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_err}")
            # –ü–æ–≤—ñ–¥–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            # await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
            print(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            # await interaction.edit_original_response(content="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...")


    @app_commands.command(name='set-admin-response', description='–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω—Å—å–∫–µ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.')
    @app_commands.describe(
        member="–£—á–∞—Å–Ω–∏–∫, —è–∫–æ–º—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è", # <--- –û–ø–∏—Å –∞—Ä–≥—É–º–µ–Ω—Ç—É
        text="–¢–µ–∫—Å—Ç –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è"                # <--- –û–ø–∏—Å –∞—Ä–≥—É–º–µ–Ω—Ç—É
    )
    async def setadminresponse(
        self,
        interaction: discord.Interaction, # <--- interaction –∑–∞–º—ñ—Å—Ç—å ctx
        member: discord.Member,           # <--- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∏–ø discord.Member
        text: str                         # <--- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∏–ø str
    ):

        await interaction.response.defer(ephemeral=True, thinking=True)
        await self.checkadd(interaction, member)    

        if not interaction.user.id in MODERATOR_LIST:
            await interaction.edit_original_response(embed=ebmtemp.create("–ü–æ–º–∏–ª–∫–∞", f"–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è."))
            return

        pool = self.bot.db_pool
        if pool is None:
            # –Ø–∫—â–æ –ø—É–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞), –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ –≤–∏—Ö–æ–¥–∏–º–æ
            await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.") # –ê–±–æ —ñ–Ω—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return

        try:
            async with pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    sql_query = "UPDATE users SET adminresponse = %s WHERE userid = %s"
                    query_params = (text, member.id, )
                    await cursor.execute(sql_query, query_params)

                    await interaction.edit_original_response(embed=ebmtemp.create("–£—Å–ø—ñ—Ö", f"–ê–¥–º—ñ–Ω—Å—å–∫–µ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–µ. :sparkling_heart: \n```{text}```"))

            
        except aiomysql.Error as db_err:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            print(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_err}")
            # –ü–æ–≤—ñ–¥–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            # await interaction.edit_original_response(content="–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
            print(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            # await interaction.edit_original_response(content="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è cog
async def setup(bot):
    await bot.add_cog(ProfileCog(bot))